package de.mpi_cbg.revant.factorize;


public class Split implements Comparable {
	/**
	 * Sorting status of all splits
	 */
	public static final int UNSORTED = -1;
	public static final int POSITION = 0;
	public static int order = UNSORTED;

	/**
	 * Properties of a split. $n{Open,Closed,Unknown}$ count the begin/end of an interval.
	 * The absolute numbers have little information: what carries information is just 
	 * whether they are zero or greater than zero. This is because splits are generated 
	 * either directly (e.g. the peaks in $DenseSubstrings.splitSubstrings()$, with weight
	 * one each), or by aggregating events (e.g. the events generated by 
	 * $PeriodicSubstrings.addEvents()$, with weight one each).
	 */
	public int position;
	public int nOpen, nClosed, nUnknown;


	public Split(int position) {
		this.position=position;
	}


	public void clear() {
		position=-1;
		nOpen=0;
		nClosed=0;
		nUnknown=0;
	}


	public int compareTo(Object other) {
		Split otherPoint = (Split)other;
		if (order==POSITION) {
			if (position<otherPoint.position) return -1;
			else if (position>otherPoint.position) return 1;
		}
		return 0;
	}


	public String toString() {
		return position+", nOpen="+nOpen+" nClosed="+nClosed+" nUnknown="+nUnknown;
	}

}