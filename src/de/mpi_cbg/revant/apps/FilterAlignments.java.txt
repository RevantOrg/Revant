package de.mpi_cbg.revant.apps;

import java.io.*;
import java.util.*;
import java.awt.*;
import java.awt.image.*;
import java.awt.geom.*;
import javax.imageio.*;
import java.text.*;

import de.mpi_cbg.revant.util.Math;
import de.mpi_cbg.revant.util.Constants;
import de.mpi_cbg.revant.factorize.Alignments;
import de.mpi_cbg.revant.factorize.Reads;
import de.mpi_cbg.revant.factorize.Intervals;

/**
 * 
 *
 * @param args 
 */
public class FilterAlignments {
	
	/**
	 * Marks periodic repeats: 0=noperiodic; 1=short-period; 2=long-period.
	 */
	private static final byte[] isPeriodic;
	
	
	
	private static final int DISTANCE_THRESHOLD = 20;  // Arbitrary
	private static final int LENGTH_THRESHOLD = 100;  // Arbitrary
	private static final String NON_REPETITIVE = "nonrepetitive";
	private static final String PAF_SEPARATOR = "\t";
	private static final int HEADER_ROWS = 100;  // in pixels
	private static int rFrom, gFrom, bFrom, rTo, gTo, bTo;
	
	
	
	
	
	private static int K_VALUE;
	private static long idGenerator;
	
	/**
	 * Every distinct k-mer in a recoded read
	 */
	private static KmerTree kmerSet;
	
	private static int[] kmerCountHistogram, edgeCountHistogram, degreeHistogram;
	private static Kmer[] stack;
	
	
	
	private static final int STACK_CAPACITY = 10000;
	
	
	
	
	
	
	
	
	
	
	
	public static void main(String[] args) throws IOException {
		final String INPUT_FILE = args[0];
		K_VALUE=Integer.parseInt(args[1]);
		
		int i;
		int previous;
		long count;
		
		Reads.readLengths = new int[N_READS];
		Math.set(Reads.readLengths,N_READS-1,READ_LENGTH);
		
		
		System.err.println("Building the alphabet...");
		buildAlphabet(INPUT_FILE);
		System.err.println("Alphabet built. Size: "+(lastAlphabet+1));
		System.err.println("Histogram of lengths of recoded sequences:");
		Arrays.sort(sequenceLengths,0,lastSequenceLength+1);
		previous=sequenceLengths[0]; count=1;
		for (i=1; i<=lastSequenceLength; i++) {
			if (sequenceLengths[i]==previous) count++;
			else {
				System.err.println(previous+","+count);
				previous=sequenceLengths[i]; count=1;
			}
		}
		System.err.println(previous+","+count);
		
		System.err.println("Building k-mers...");
		buildKmers(INPUT_FILE);
		System.err.println(idGenerator+" k-mers built");
		kmerCountHistogram = new int[1001];
		for (i=0; i<kmerCountHistogram.length; i++) kmerCountHistogram[i]=0;
		edgeCountHistogram = new int[1001];
		for (i=0; i<edgeCountHistogram.length; i++) edgeCountHistogram[i]=0;
		degreeHistogram = new int[1001];
		for (i=0; i<degreeHistogram.length; i++) degreeHistogram[i]=0;
		kmerSet.kmerFrequencyStats();
		System.err.println("Histogram of node counts:");
		for (i=0; i<kmerCountHistogram.length; i++) System.err.println(i+","+kmerCountHistogram[i]);
		System.err.println("Histogram of edge counts:");
		for (i=0; i<edgeCountHistogram.length; i++) System.err.println(i+","+edgeCountHistogram[i]);
		System.err.println("Histogram of node degrees:");
		for (i=0; i<degreeHistogram.length; i++) System.err.println(i+","+degreeHistogram[i]);
		
		System.err.println("Printing connected components of the DBG...");
		stack = new Kmer[STACK_CAPACITY];
		idGenerator=0;
		kmerSet.kmerCleanConnectedComponents();
		kmerSet.kmerConnectedComponents();
		System.err.println((idGenerator+1)+" connected components built");
		

System.err.println("digraph G {");
kmerSet.kmerCompressUnaryPaths();
kmerSet.kmerToDot();
System.err.println("}");

	}
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	




















































	
	
		
	// ------------------------- K-MER PROCEDURES ------------------------------
	
	/**
	 * A simple trie that collects all k-mers.
	 */
	private static class KmerTree {
		public static final int CAPACITY = 2;  // Arbitrary
		
		public int character;  // Position in $alphabet$.
		public KmerTree parent;
		public KmerTree[] children;
		public int lastChild;
		public Kmer kmer;
		
		
		public KmerTree(int c) {
			this.character=c;
			parent=null;
			children = new KmerTree[CAPACITY];
			lastChild=-1;
			kmer=null;
		}
		
		
		/**
		 * @return the new descendant created, or the existing descendant of the
		 * node, with label equal to string $sequence[from..to]$.
		 */
		public KmerTree add(Character[] sequence, int from, int to) {
			int i;
			KmerTree currentNode;
			
			currentNode=this;
			for (i=from; i<=to; i++) currentNode=currentNode.addChild(sequence[i].id);
			return currentNode;
		}
		
		
		/**
		 * @return the new child created, or the existing child of the node with
		 * label $c$.
		 */
		public KmerTree addChild(int c) {
			for (int i=0; i<=lastChild; i++) {
				if (children[i].character==c) return children[i];
			}
			lastChild++;
			if (lastChild==children.length) {
				KmerTree[] newChildren = new KmerTree[children.length<<1];
				System.arraycopy(children,0,newChildren,0,children.length);
				children=newChildren;
			}
			children[lastChild] = new KmerTree(c);
			children[lastChild].parent=this;
			return children[lastChild];
		}
		
		
		public String getLabel(boolean simple) {
			KmerTree currentNode;
			String out;
			
			out=""; currentNode=this;
			while (currentNode!=kmerSet) {
				if (simple) out=alphabet[currentNode.character].id+"_"+out;
				else out=alphabet[currentNode.character].toString()+"\n"+out;
				currentNode=currentNode.parent;
			}
			return out;
		}
		
		
		public long getLengthBps() {
			KmerTree currentNode;
			long out;
			
			out=0; currentNode=this;
			while (currentNode!=kmerSet) {
				out+=alphabet[currentNode.character].getLength();
				currentNode=currentNode.parent;
			}
			return out;
		}
		
		
		public long getLengthBps_first() {
			KmerTree currentNode;
			
			currentNode=this;
			while (currentNode.parent!=kmerSet) currentNode=currentNode.parent;
			return alphabet[currentNode.character].getLength();
		}
		
		
		public long getLengthBps_last() {
			return alphabet[this.character].getLength();
		}
		
		
		public final void kmerFrequencyStats() {
			if (lastChild==-1) {
				kmer.frequencyStats();
				return;
			}
			for (int i=0; i<=lastChild; i++) children[i].kmerFrequencyStats();
		}
		
		
		public final void kmerCleanConnectedComponents() {
			if (lastChild==-1) {
				kmer.cleanConnectedComponent();
				return;
			}
			for (int i=0; i<=lastChild; i++) children[i].kmerCleanConnectedComponents();
		}
		
		
		public final void kmerConnectedComponents() {
			if (lastChild==-1) {
				kmer.getConnectedComponent();
				return;
			}
			for (int i=0; i<=lastChild; i++) children[i].kmerConnectedComponents();
		}
		
		
		public final void kmerToDot() {
			if (lastChild==-1) {
				kmer.toDot();
				return;
			}
			for (int i=0; i<=lastChild; i++) children[i].kmerToDot();
		}
		
		
		public final void kmerCompressUnaryPaths() {
			if (lastChild==-1) {
				kmer.compressUnaryPaths();
				return;
			}
			for (int i=0; i<=lastChild; i++) children[i].kmerCompressUnaryPaths();
		}
		
	}
	
	
	/**
	 * A node of the de Bruijn graph.
	 */
	private static class Kmer {
		public static final int CAPACITY = 2;  // Arbitrary
		private static final int NODE_SIZE = 10;
		private static final double WEIGHT_RATE = 0.01;
		
		public long id;
		public KmerTree node;
		public long count;
		public Kmer[] leftExtensions, rightExtensions;
		public long[] leftExtensionCounts, rightExtensionCounts;
		public int lastLeftExtension, lastRightExtension;
		public int connectedComponent;
		
		
		public Kmer() {
			id=-1; count=0; lastLeftExtension=-1; lastRightExtension=-1;
			leftExtensions = new Kmer[CAPACITY];
			rightExtensions = new Kmer[CAPACITY];
			rightExtensionCounts = new long[CAPACITY];
			leftExtensionCounts = new long[CAPACITY];
			connectedComponent=-1;
			node=null;
		}
		
		
		public void addRightExtension(Kmer neighbor) {
			for (int i=0; i<=lastRightExtension; i++) {
				if (rightExtensions[i].equals(neighbor)) {
					rightExtensionCounts[i]++;
					return;
				}
			}
			lastRightExtension++;
			if (lastRightExtension==rightExtensions.length) {
				int newLength = rightExtensions.length<<1;
				Kmer[] newArray = new Kmer[newLength];
				System.arraycopy(rightExtensions,0,newArray,0,rightExtensions.length);
				rightExtensions=newArray;
				long[] newArray2 = new long[newLength];
				System.arraycopy(rightExtensionCounts,0,newArray2,0,rightExtensionCounts.length);
				rightExtensionCounts=newArray2;
			}
			rightExtensions[lastRightExtension]=neighbor;
			rightExtensionCounts[lastRightExtension]=1;
		}
		
		
		public void addLeftExtension(Kmer neighbor) {
			for (int i=0; i<=lastLeftExtension; i++) {
				if (leftExtensions[i].equals(neighbor)) {
					leftExtensionCounts[i]++;
					return;
				}
			}
			lastLeftExtension++;
			if (lastLeftExtension==leftExtensions.length) {
				int newLength = leftExtensions.length<<1;
				Kmer[] newArray = new Kmer[newLength];
				System.arraycopy(leftExtensions,0,newArray,0,leftExtensions.length);
				leftExtensions=newArray;
				long[] newArray2 = new long[newLength];
				System.arraycopy(leftExtensionCounts,0,newArray2,0,leftExtensionCounts.length);
				leftExtensionCounts=newArray2;
			}
			leftExtensions[lastLeftExtension]=neighbor;
			leftExtensionCounts[lastLeftExtension]=1;
		}
		
		
		public void frequencyStats() {
			final int degree = lastLeftExtension+lastRightExtension+2;
			int i;
			
			kmerCountHistogram[(int)(count>=kmerCountHistogram.length?kmerCountHistogram.length-1:count)]++;
			for (i=0; i<=lastLeftExtension; i++) edgeCountHistogram[(int)(leftExtensionCounts[i]>=edgeCountHistogram.length?kmerCountHistogram.length-1:leftExtensionCounts[i])]++;
			for (i=0; i<=lastRightExtension; i++) edgeCountHistogram[(int)(rightExtensionCounts[i]>=edgeCountHistogram.length?edgeCountHistogram.length-1:rightExtensionCounts[i])]++;
			degreeHistogram[degree>=degreeHistogram.length?degreeHistogram.length-1:degree]++;
			
			
if (degree==29) {
	System.err.println("k-mer with degree "+degree+": ");
	System.err.println(node.getLabel(false));
	System.err.println("right neighbors:  "+(lastRightExtension+1));
	for (int x=0; x<=lastRightExtension; x++) {
		System.err.println(rightExtensions[x].node.getLabel(false));
		System.err.println();
	}
	System.err.println("left neighbors:  "+(lastLeftExtension+1));
	for (int x=0; x<=lastLeftExtension; x++) {
		System.err.println(leftExtensions[x].node.getLabel(false));
		System.err.println();
	}
}
			
		}
		
		
		public void cleanConnectedComponent() {
			connectedComponent=-1;
		}
		
		
		/**
		 * Sets the $connectedComponent$ field of every k-mer that is reachable 
		 * from this k-mer in the de Bruijn graph, and that does not already 
		 * have a connected component.
		 */
		public void getConnectedComponent() {
			if (connectedComponent>=0) return;
			final int newComponent = (int)(++idGenerator);
			int i;
			int top;
			Kmer currentKmer, neighbor;			
			
			this.connectedComponent=newComponent;
			stack[0]=this; top=0;
			while (top>=0) {
				currentKmer=stack[top--];
				ensureStack(top+1+(currentKmer.lastLeftExtension+1)+(currentKmer.lastRightExtension+1));
				for (i=0; i<=currentKmer.lastLeftExtension; i++) {
					neighbor=currentKmer.leftExtensions[i];
					if (neighbor.connectedComponent==-1) {
						neighbor.connectedComponent=newComponent;
						stack[++top]=neighbor;
					}
					else if (neighbor.connectedComponent!=newComponent) {
						System.err.println("getConnectedComponent> ERROR: different connected components "+newComponent+" :: "+neighbor.connectedComponent);
						System.exit(1);
					}
				}
				for (i=0; i<=currentKmer.lastRightExtension; i++) {
					neighbor=currentKmer.rightExtensions[i];
					if (neighbor.connectedComponent==-1) {
						neighbor.connectedComponent=newComponent;
						stack[++top]=neighbor;
					}
					else if (neighbor.connectedComponent!=newComponent) {
						System.err.println("getConnectedComponent> ERROR: different connected components "+newComponent+" :: "+neighbor.connectedComponent);
						System.exit(1);
					}
				}
			}
		}
		
		/**
		 *
		 */
		public void toDot() {
			final int degree = lastLeftExtension+lastRightExtension+2;
			if (degree==0) return;
			
			System.out.println(node.getLabel(true)+" [size=\""+((int)Math.log(NODE_SIZE*count))+"\"];");
			for (int i=0; i<=lastRightExtension; i++) System.out.println(node.getLabel(true)+" -> "+rightExtensions[i].node.getLabel(true)+"[weight=\""+Math.max(rightExtensionCounts[i]*WEIGHT_RATE,1.0)+"\"];");
			for (int i=0; i<=lastLeftExtension; i++) System.out.println(leftExtensions[i].node.getLabel(true)+" -> "+node.getLabel(true)+"[weight=\""+Math.max(leftExtensionCounts[i]*WEIGHT_RATE,1.0)+"\"];");
		}
		
		
		/**
		 * For simplicity it does not compress simple cycles.
		 */
		public void compressUnaryPaths() {
			boolean inSimpleCycle;
			int i, p, q;
			long pathLength;
			Kmer currentKmer, previousKmer, leftKmer, rightKmer;
			
			if (lastLeftExtension!=0 || lastRightExtension!=0 || leftExtensions[0]==rightExtensions[0]) return;
			rightKmer=rightExtensions[0];
			pathLength=node.getLengthBps();
			
//System.err.println("compressUnaryPaths> CALLED FROM "+this+" ----------------");			
			
			
			// Check for presence of a simple cycle
			currentKmer=this; inSimpleCycle=false;
			while (currentKmer.lastLeftExtension==0 && currentKmer.lastRightExtension==0) {
				currentKmer=currentKmer.leftExtensions[0];
				if (currentKmer==this) {
					inSimpleCycle=true;
					break;
				}
			}
			if (inSimpleCycle) return;
			
			// Left traversal
			currentKmer=this; previousKmer=null; leftKmer=leftExtensions[0];
			while (currentKmer.lastLeftExtension==0 && currentKmer.lastRightExtension==0) {
				
/*				
System.err.println("compressUnaryPaths> currentKmer: "+currentKmer);
System.err.println("compressUnaryPaths> previousKmer: "+previousKmer);
System.err.println("compressUnaryPaths> right-extensions: ");
for (int x=0; x<=currentKmer.lastRightExtension; x++) System.err.println(x+": "+currentKmer.rightExtensions[x]);
System.err.println("compressUnaryPaths> left-extensions: ");
for (int x=0; x<=currentKmer.lastLeftExtension; x++) System.err.println(x+": "+currentKmer.leftExtensions[x]);
*/
				
				currentKmer.lastLeftExtension=-1;
				currentKmer.lastRightExtension=-1;				
				previousKmer=currentKmer;
				currentKmer=leftKmer;
				pathLength+=currentKmer.node.getLengthBps_first();
				leftKmer=currentKmer.leftExtensions[0];
			}
			p=-1;
			for (i=0; i<=currentKmer.lastRightExtension; i++) {
				if (currentKmer.rightExtensions[i]==previousKmer) {
					p=i;
					break;
				}
			}
			leftKmer=currentKmer;
			pathLength-=leftKmer.node.getLengthBps_first();
			
			// Right traversal
			currentKmer=rightKmer; previousKmer=this; rightKmer=currentKmer.rightExtensions[0];
			pathLength+=currentKmer.node.getLengthBps_last();
			while (currentKmer.lastLeftExtension==0 && currentKmer.lastRightExtension==0) {
				currentKmer.lastLeftExtension=-1;
				currentKmer.lastRightExtension=-1;				
				previousKmer=currentKmer;
				currentKmer=rightKmer;
				pathLength+=currentKmer.node.getLengthBps_last();
				rightKmer=currentKmer.rightExtensions[0];
			}
			q=-1;
			for (i=0; i<=currentKmer.lastLeftExtension; i++) {
				if (currentKmer.leftExtensions[i]==previousKmer) {
					q=i;
					break;
				}
			}
			rightKmer=currentKmer;
			pathLength-=rightKmer.node.getLengthBps_last();
			
			// Connecting the two ends of the unary path
			leftKmer.rightExtensions[p]=this;
			this.lastLeftExtension=0;
			this.leftExtensions[0]=leftKmer;
			this.lastRightExtension=0;
			this.rightExtensions[0]=rightKmer;
			rightKmer.leftExtensions[q]=this;
			
			System.err.println("unary path length bps: "+pathLength);
		}
	}
	
	
	/**
	 * Recodes every read and builds the set of distinct k-mers.
	 */
	private static final void buildKmers(String inputFile) throws IOException {
		final int SEQUENCE_LENGTH_CAPACITY = 1000000;  // Arbitrary
		boolean found, orientation;
		int i, j;
		int lastAlignment, startA, endA, startB, endB, diffs, lengthA, lengthB;
		int mask, lastInSequence, row, previous, count;
		String str, readA, previousReadA, readB;
		BufferedReader br;
		Character tmpCharacter;
		String[] tokens;
				
		// Collecting all characters (not necessarily distinct), from all
		// recoded sequences.
		kmerSet = new KmerTree(0); idGenerator=0;
		br = new BufferedReader(new FileReader(inputFile));
		str=br.readLine(); previousReadA=null; lastAlignment=-1; row=0;
		while (str!=null)  {
			if (row%100000==0) System.err.println("Processed "+row+" alignments, "+idGenerator+" k-mers collected.");
			tokens=str.split(PAF_SEPARATOR);
			readA=tokens[0]; 
			readB=tokens[5];
			orientation=tokens[4].charAt(0)=='+';
			startA=Integer.parseInt(tokens[2]);
			endA=Integer.parseInt(tokens[3]);
			startB=Integer.parseInt(tokens[7]);
			endB=Integer.parseInt(tokens[8]);
			diffs=Integer.parseInt(tokens[10])-Integer.parseInt(tokens[9]);
			lengthA=Integer.parseInt(tokens[1]);
			lengthB=Integer.parseInt(tokens[6]);
			if (previousReadA==null || !readA.equalsIgnoreCase(previousReadA)) {
				if (previousReadA!=null) {
					lastAlignment=clean(alignments,lastAlignment);
					lastInSequence=recode(alignments,lastAlignment,sequence,tmpArray);
					
					
Character[] backup = new Character[lastInSequence+1];
System.arraycopy(sequence,0,backup,0,lastInSequence+1);
boolean fabio = toAlphabet(sequence,lastInSequence);
if (fabio) {
	System.err.println("FUCK! FOUND THE TRIMER IN SEQUENCE "+previousReadA);
	for (int x=0; x<=lastInSequence; x++) System.err.println("---> "+x+": "+backup[x]+"  ---> "+sequence[x]);
	System.err.println();
}



					extractKmers(sequence,lastInSequence);
				}
				previousReadA=readA; lastAlignment=0;
				alignments[0].set(readA,startA,endA,readB,startB,endB,orientation,diffs,lengthA,lengthB);
			}
			else {
				lastAlignment++;
				if (lastAlignment==alignments.length) {
					AlignmentRow[] newAlignments = new AlignmentRow[alignments.length<<1];
					System.arraycopy(alignments,0,newAlignments,0,alignments.length);
					for (i=alignments.length; i<newAlignments.length; i++) newAlignments[i] = new AlignmentRow();
					alignments=newAlignments;
				}
				alignments[lastAlignment].set(readA,startA,endA,readB,startB,endB,orientation,diffs,lengthA,lengthB);
			}
			str=br.readLine(); row++;
		}
		br.close();
		if (previousReadA!=null) {
			lastAlignment=clean(alignments,lastAlignment);
			lastInSequence=recode(alignments,lastAlignment,sequence,tmpArray);
boolean fabio = toAlphabet(sequence,lastInSequence);
if (fabio) System.err.println("FUCK! FOUND THE TRIMER IN SEQUENCE "+previousReadA);
			extractKmers(sequence,lastInSequence);
		}
	}
	
	
	/**
	 * Assumes that $alphabet$ has already been built, and replaces every 
	 * character in $sequence$ with the result of its lookup in $alphabet$.
	 */
	private static final boolean toAlphabet(Character[] sequence, int lastCharacter) {
		int i;
		Character newCharacter;

		if (lastCharacter<2) return false;
		for (i=1; i<lastCharacter; i++) {
			newCharacter=inAlphabet(sequence[i]);
			if (newCharacter==null) {
				System.err.println("toAlphabet> ERROR: character not found in the alphabet: "+sequence[i]);
				System.exit(1);
			}
			sequence[i]=newCharacter;
		}
		
		
		
		
		
		
		
		
boolean found=false;		
for (int x=0; x<lastCharacter-4; x++) {
/*	if ( sequence[x].lastTuple==0 && sequence[x].tuples[0].readB.equalsIgnoreCase("HERVH") && sequence[x].tuples[0].orientation && sequence[x].tuples[0].startB==25 && sequence[x].tuples[0].endB==3965 &&
		 sequence[x+1].isNonrepetitive() && sequence[x+1].tuples[0].lengthB==1278 &&
		 sequence[x+2].lastTuple==0 && sequence[x+2].tuples[0].readB.equalsIgnoreCase("LTR7A") && sequence[x+2].tuples[0].orientation && sequence[x+2].tuples[0].startB==3 && sequence[x+2].tuples[0].endB==430
	   ) {
*/
	if (sequence[x].id==44 && sequence[x+1].id==48793 && sequence[x+2].id==105 && sequence[x+3].id==48593 && sequence[x+4].id==39) {	
		   System.err.println("FUCK! I FOUND THE 5-mer AT POSITION "+x+" IN A SEQUENCE");
		   found=true;
	   }
}		
return found;
		
		
	}
	
	
	/**
	 * Remark: the procedure assumes $alphabet$ to be sorted.
	 *
	 * @return an element of $alphabet$ that is most similar to $query$, or NULL
	 * if no such element exists.
	 */
	private static final Character inAlphabet(Character query) {
		int i, p;
		double distance, minDistance;
		Character character, minCharacter;
		
		p=Arrays.binarySearch(alphabet,0,lastAlphabet+1,query);
		if (p<0) p=-1-p;
		minCharacter=null; minDistance=Integer.MAX_VALUE;
		for (i=p-1; i>=0; i--) {
			character=alphabet[i];
			if (!character.sameReadB(query)) break;
			if (character.isSimilar(query)) {
				distance=character.getDistance(query);
				if (distance<minDistance) {
					minDistance=distance;
					minCharacter=character;
				}	
			}
		}
		for (i=p; i<=lastAlphabet; i++) {
			character=alphabet[i];
			if (!character.sameReadB(query)) break;
			if (character.isSimilar(query)) {
				distance=character.getDistance(query);
				if (distance<minDistance) {
					minDistance=distance;
					minCharacter=character;
				}	
			}
		}
		return minCharacter;
	}
	
	
	/**
	 * Adds to $kmerSet$ all substrings of length $K_VALUE$ of $sequence$.
	 */
	private static final void extractKmers(Character[] sequence, int lastCharacter) {
		int i;
		Character newCharacter;
		KmerTree node;
		Kmer currentKmer, previousKmer;

		if (lastCharacter+1-2<K_VALUE) return;
		previousKmer=null;
		for (i=1; i<=lastCharacter-K_VALUE; i++) {
			node=kmerSet.add(sequence,i,i+K_VALUE-1);
			if (node.kmer==null) {
				node.kmer = new Kmer();
				node.kmer.id=++idGenerator;
				node.kmer.node=node;
			}
			currentKmer=node.kmer;
			currentKmer.count++;
			if (previousKmer!=null) {
				previousKmer.addRightExtension(currentKmer);
				currentKmer.addLeftExtension(previousKmer);
			}
			previousKmer=currentKmer;
		}
	}
	
	
	private static final void ensureStack(int newSize) {
		if (stack.length>=newSize) return;
		Kmer[] newStack = new Kmer[(stack.length<<1)<newSize?newSize:stack.length<<1];
		System.arraycopy(stack,0,newStack,0,stack.length);
		stack=newStack;
	}
	
	
	
	
	// -------------------------- DRAWING PROCEDURES ---------------------------
	
	/**
	 * Draws a cleaned alignment of every read.
	 */
	private static final void draw(String inputFile, boolean transparent) throws IOException {
		boolean orientation;
		int i;
		int lastAlignment, startA, endA, startB, endB, diffs, lengthA, lengthB;
		int row;
		String str, readA, previousReadA, readB;
		BufferedReader br;
		String[] tokens;
		
		// Allocating memory
		if (alignments==null || alignments.length<ALIGNMENTS_CAPACITY) alignments = new AlignmentRow[ALIGNMENTS_CAPACITY];
		for (i=0; i<alignments.length; i++) alignments[i] = new AlignmentRow();
		
		// Drawing
		br = new BufferedReader(new FileReader(inputFile));
		str=br.readLine(); previousReadA=null; lastAlignment=-1; row=0;
		while (str!=null)  {
			if (row%100000==0) System.err.println("Processed "+row+" alignments, alphabet="+(lastAlphabet+1));
			tokens=str.split(PAF_SEPARATOR);
			readA=tokens[0]; 
			readB=tokens[5];
			orientation=tokens[4].charAt(0)=='+';
			startA=Integer.parseInt(tokens[2]);
			endA=Integer.parseInt(tokens[3]);
			startB=Integer.parseInt(tokens[7]);
			endB=Integer.parseInt(tokens[8]);
			diffs=Integer.parseInt(tokens[10])-Integer.parseInt(tokens[9]);
			lengthA=Integer.parseInt(tokens[1]);
			lengthB=Integer.parseInt(tokens[6]);
			if (previousReadA==null || !readA.equalsIgnoreCase(previousReadA)) {
				if (previousReadA!=null) {
					lastAlignment=clean(alignments,lastAlignment);
					draw_impl(alignments,lastAlignment,transparent);
				}
				previousReadA=readA; lastAlignment=0;
				alignments[0].set(readA,startA,endA,readB,startB,endB,orientation,diffs,lengthA,lengthB);
			}
			else {
				lastAlignment++;
				if (lastAlignment==alignments.length) {
					AlignmentRow[] newAlignments = new AlignmentRow[alignments.length<<1];
					System.arraycopy(alignments,0,newAlignments,0,alignments.length);
					for (i=alignments.length; i<newAlignments.length; i++) newAlignments[i] = new AlignmentRow();
					alignments=newAlignments;
				}
				alignments[lastAlignment].set(readA,startA,endA,readB,startB,endB,orientation,diffs,lengthA,lengthB);
			}
			str=br.readLine(); row++;
		}
		br.close();
		if (previousReadA!=null) {
			lastAlignment=clean(alignments,lastAlignment);
			draw_impl(alignments,lastAlignment,transparent);
		}
	}
	
	
	private static final void draw_impl(AlignmentRow[] alignments, int lastAlignment, boolean transparent) throws IOException {
		final int QUANTUM = 1;
		final int COLOR_BACKGROUND = 0x00050A0D;
		final int N_COLUMNS = alignments[0].lengthA/QUANTUM;
		final int N_ROWS = HEADER_ROWS+lastAlignment+1;
		final int HALF_MAX_HEIGHT = N_ROWS>>1;
		final int TRUNCATION_TAG_WIDTH_PIXELS = 3;
		final int TRUNCATION_MULTIPLE= 1000;
		final int TRANSPARENT_BORDER_PIXELS = 2;
		final int COLOR_REFERENCE = 0x00244254;
		final int COLOR_REFERENCE_HIGHLIGHT = 0x00509FB5;
		final String DEFAULT_FONT = "Barlow";
		int i, j, x, y;
		int firstX, lastX, leftTruncation, rightTruncation, aLength, height, fromY;
		String label;
		BufferedImage image;
		final NumberFormat formatter = NumberFormat.getInstance();
		formatter.setMaximumFractionDigits(2);
		
		image = new BufferedImage(N_COLUMNS,N_ROWS,BufferedImage.TYPE_INT_RGB);
		for (x=0; x<N_COLUMNS; x++) {
			for (y=0; y<N_ROWS; y++) setRGB(image,x,y,COLOR_BACKGROUND);
		}
		fromY=0;
		for (j=0; j<=lastAlignment; j++) {
			// Drawing truncated triangles
			leftTruncation=alignments[j].orientation?alignments[j].startB:alignments[j].lengthB-alignments[j].endB;
			rightTruncation=alignments[j].orientation?alignments[j].lengthB-alignments[j].endB:alignments[j].startB;
			firstX=alignments[j].startA-leftTruncation;
			lastX=alignments[j].endA+rightTruncation;
			aLength=lastX-firstX+1;
			for (x=alignments[j].startA; x<=alignments[j].endA; x++) {
				height=Math.round(HALF_MAX_HEIGHT*(alignments[j].orientation?lastX-x:x-firstX)/aLength);
				if ( (leftTruncation>DISTANCE_THRESHOLD && ((x-alignments[j].startA)/QUANTUM)<=TRUNCATION_TAG_WIDTH_PIXELS) || 
					 (rightTruncation>DISTANCE_THRESHOLD && ((alignments[j].endA-x)/QUANTUM)<=TRUNCATION_TAG_WIDTH_PIXELS)
				   ) {
					for (y=fromY+HALF_MAX_HEIGHT-height; y<=fromY+HALF_MAX_HEIGHT+height; y++) setRGB(image,x/QUANTUM,y,COLOR_REFERENCE_HIGHLIGHT);
				}
				else {
					if (transparent) {
						if (x<=alignments[j].startA+TRANSPARENT_BORDER_PIXELS || x>=alignments[j].endA-TRANSPARENT_BORDER_PIXELS) {
							for (y=fromY+HALF_MAX_HEIGHT-height; y<=fromY+HALF_MAX_HEIGHT+height; y++) setRGB(image,x/QUANTUM,y,COLOR_REFERENCE);
						} 
						else {
							for (y=fromY+HALF_MAX_HEIGHT-height; y<=fromY+HALF_MAX_HEIGHT-height+TRANSPARENT_BORDER_PIXELS; y++) setRGB(image,x/QUANTUM,y,COLOR_REFERENCE);
							for (y=fromY+HALF_MAX_HEIGHT+height-TRANSPARENT_BORDER_PIXELS; y<=fromY+HALF_MAX_HEIGHT+height; y++) setRGB(image,x/QUANTUM,y,COLOR_REFERENCE);
						}
					}
					else {
						for (y=fromY+HALF_MAX_HEIGHT-height; y<=fromY+HALF_MAX_HEIGHT+height; y++) setRGB(image,x/QUANTUM,y,COLOR_REFERENCE);
					}
				}
			}

			// Drawing text
			final Graphics2D g2d = image.createGraphics();
			g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
			g2d.setFont(new Font(DEFAULT_FONT,Font.PLAIN,15));
			g2d.setColor(new Color(COLOR_REFERENCE_HIGHLIGHT));
			final FontMetrics fontMetrics = g2d.getFontMetrics();
			label=""+alignments[j].readB.toUpperCase();
			x=((alignments[j].startA+alignments[j].endA)/2)/QUANTUM-(int)Math.round(((double)fontMetrics.stringWidth(label))/2);
			y=fromY+HALF_MAX_HEIGHT+fontMetrics.getAscent()/2;
			g2d.drawString(label,x,y);
			if (leftTruncation>DISTANCE_THRESHOLD) {
				label=""+formatter.format(((double)leftTruncation)/TRUNCATION_MULTIPLE);
				x=alignments[j].startA/QUANTUM+TRUNCATION_TAG_WIDTH_PIXELS+TRUNCATION_TAG_WIDTH_PIXELS;
				y=fromY+HALF_MAX_HEIGHT+fontMetrics.getAscent()/2;
				g2d.drawString(label,x,y);
			}
			if (rightTruncation>DISTANCE_THRESHOLD) {
				label=""+formatter.format(((double)rightTruncation)/TRUNCATION_MULTIPLE);
				x=alignments[j].endA/QUANTUM-TRUNCATION_TAG_WIDTH_PIXELS-TRUNCATION_TAG_WIDTH_PIXELS-fontMetrics.stringWidth(label);
				y=fromY+HALF_MAX_HEIGHT+fontMetrics.getAscent()/2;
				g2d.drawString(label,x,y);
			}
		}
		
		// Writing to disk
		ImageIO.write(image,"png",new File(alignments[0].readA.replace('/','-')+".png"));
	}
	
	
	private static final void setRGB(BufferedImage image, int x, int y, int color) {
		if (x<0 || y<0 || x>=image.getWidth() || y>=image.getHeight()) return;
		image.setRGB(x,y,color);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/**
	 * Adds $query to $alphabet$ and sorts $alphabet$.
	 */
/*	private static final void addToAlphabet(Character query) {
		lastAlphabet++;
		if (lastAlphabet==alphabet.length) {
			Character[] newAlphabet = new Character[alphabet.length<<1];
			System.arraycopy(alphabet,0,newAlphabet,0,alphabet.length);
			alphabet=newAlphabet;
		}
		alphabet[lastAlphabet]=query;
		Arrays.sort(alphabet,0,lastAlphabet+1);
	}
*/	
	
	
	

}